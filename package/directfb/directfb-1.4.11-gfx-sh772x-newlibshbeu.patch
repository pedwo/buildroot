diff --git a/configure.in b/configure.in
index 01b6f2e..ad5230b 100644
--- a/configure.in
+++ b/configure.in
@@ -1179,7 +1179,14 @@ if test "$checkfor_savage" = "yes" && test "$have_sysio" = "yes"; then
 fi
 
 if test "$checkfor_sh772x" = "yes" && test "$have_sh4" = "yes"; then
-  sh772x=yes
+  PKG_CHECK_MODULES([SH772X_DEP],
+    [uiomux >= 1.5.0 shbeu >= 1.0.2 shjpeg >= 1.3.3], [sh772x=yes], [sh772x=no])
+  if test "$sh772x" = "no"; then
+       AC_MSG_WARN([*** Missing UIOMUX, SHBEU or SHJPEG library -- sh772x driver will not be built.])
+  fi
+fi
+if test "$sh772x" = "yes"; then
+  AC_DEFINE(HAVE_GFX_SH772X, [], [Define to 1 if sh772x])
 fi
 
 if test "$checkfor_sis315" = "yes"; then
diff --git a/gfxdrivers/sh772x/Makefile.am b/gfxdrivers/sh772x/Makefile.am
index 1e1dcb4..ccdedbc 100644
--- a/gfxdrivers/sh772x/Makefile.am
+++ b/gfxdrivers/sh772x/Makefile.am
@@ -50,13 +50,13 @@ libdirectfb_sh7722_la_SOURCES =	\
 	sh7722_types.h		\
 	sh7722_jpeg.c
 
+libdirectfb_sh7722_la_CFLAGS = $(SH772X_DEP_CFLAGS)
+
 libdirectfb_sh7722_la_LDFLAGS = \
 	-module			\
 	-avoid-version		\
 	$(DFB_LDFLAGS)		\
-	-lshbeu			\
-	-luiomux		\
-	-lshjpeg
+	$(SH772X_DEP_LIBS)
 
 libdirectfb_sh7722_la_LIBADD = \
 	$(top_builddir)/src/libdirectfb.la
diff --git a/gfxdrivers/sh772x/sh7722.c b/gfxdrivers/sh772x/sh7722.c
index 0b2b9c8..a038e09 100644
--- a/gfxdrivers/sh772x/sh7722.c
+++ b/gfxdrivers/sh772x/sh7722.c
@@ -54,6 +54,7 @@ DFB_GRAPHICS_DRIVER( sh7722 )
 
 /* libshbeu */
 #include <shbeu/shbeu.h>
+#include <uiomux/uiomux.h>
 
 D_DEBUG_DOMAIN( SH7722_Driver, "SH7722/Driver", "Renesas SH7722 Driver" );
 
@@ -241,7 +242,7 @@ driver_init_device( CoreGraphicsDevice *device,
      	  struct fb_var_screeninfo vsi;
 		  int fbdev;
 
-		  if ((fbdev = open("/dev/fb0", O_RDONLY)) < 0) {
+		  if ((fbdev = open("/dev/fb0", O_RDWR)) < 0) {
 			   D_ERROR( "SH7722/Driver: Can't open fbdev to get LCDC info!\n" );
 			   return DFB_FAILURE;
 		  }
@@ -264,7 +265,6 @@ driver_init_device( CoreGraphicsDevice *device,
 		  sdev->lcd_size   = fsi.smem_len;
 		  sdev->lcd_offset = 0;
 		  sdev->lcd_phys   = fsi.smem_start;
-#if 0
 		  sdrv->lcd_virt   = mmap(NULL, fsi.smem_len, PROT_READ | PROT_WRITE, MAP_SHARED,
 				  				  fbdev, 0);
 		  if (sdrv->lcd_virt == MAP_FAILED) {
@@ -273,6 +273,7 @@ driver_init_device( CoreGraphicsDevice *device,
 			   return DFB_FAILURE;
 		  }
 
+
           /* Clear LCD buffer. */
           switch (sdev->lcd_format) {
                case DSPF_RGB16:
@@ -288,7 +289,9 @@ driver_init_device( CoreGraphicsDevice *device,
                     D_BUG( "unsupported format" );
                     return DFB_BUG;
           }
-#endif
+
+          /* Register the framebuffer with UIOMux */
+          uiomux_register (sdrv->lcd_virt, sdev->lcd_phys, sdev->lcd_size);
 
 		  close(fbdev);
      }     
@@ -400,12 +403,15 @@ driver_init_device( CoreGraphicsDevice *device,
      /* Set output pixel format of the BEU. */
      switch (sdev->lcd_format) {
           case DSPF_RGB16:
-               sdev->shbeu_dest.format = V4L2_PIX_FMT_RGB565; 
+               sdev->shbeu_dest.s.pc = NULL;
+               sdev->shbeu_dest.s.pa = NULL;
+               sdev->shbeu_dest.s.format = REN_RGB565;
                break;
 
           case DSPF_NV16:
-               sdev->shbeu_dest.pa = sdev->lcd_phys + sdev->lcd_height * sdev->lcd_pitch;
-               sdev->shbeu_dest.format = V4L2_PIX_FMT_NV16; 
+               sdev->shbeu_dest.s.pc = sdrv->lcd_virt + sdev->lcd_height * sdev->lcd_pitch;
+               sdev->shbeu_dest.s.pa = NULL;
+               sdev->shbeu_dest.s.format = REN_NV16;
                break;
 
           default:
@@ -423,11 +429,11 @@ driver_init_device( CoreGraphicsDevice *device,
      fusion_skirmish_init( &sdev->beu_lock, "BEU", dfb_core_world(sdrv->core) );
 
      /* libshbeu */
-     sdev->shbeu_dest.py = sdev->lcd_phys;
-     sdev->shbeu_dest.width = sdev->lcd_width;
-     sdev->shbeu_dest.height =sdev->lcd_height;
+     sdev->shbeu_dest.s.py = sdrv->lcd_virt;
+     sdev->shbeu_dest.s.w = sdev->lcd_width;
+     sdev->shbeu_dest.s.h =sdev->lcd_height;
+     sdev->shbeu_dest.s.pitch = sdev->lcd_pitch/DFB_BYTES_PER_PIXEL(sdev->lcd_format);
      sdev->shbeu_dest.alpha = 0xff;
-     sdev->shbeu_dest.pitch = sdev->lcd_pitch/DFB_BYTES_PER_PIXEL(sdev->lcd_format);
      sdev->shbeu_dest.x = 0;
      sdev->shbeu_dest.y = 0;
      
diff --git a/gfxdrivers/sh772x/sh7722_jpeg.c b/gfxdrivers/sh772x/sh7722_jpeg.c
index 22eee55..5e8f118 100644
--- a/gfxdrivers/sh772x/sh7722_jpeg.c
+++ b/gfxdrivers/sh772x/sh7722_jpeg.c
@@ -257,9 +257,6 @@ IDirectFBImageProvider_SH7722_JPEG_RenderTo( IDirectFBImageProvider *thiz,
      /* calculate physical address according to destination rect */
      unsigned long phys = lock.phys + DFB_BYTES_PER_LINE(dst_surface->config.format, rect.x) + rect.y * lock.pitch;
 
-     /* physical address of the c plane */
-     unsigned long cphys = 0;
-
      shjpeg_pixelformat pixelfmt;
 
      switch (dst_surface->config.format) {
@@ -274,12 +271,9 @@ IDirectFBImageProvider_SH7722_JPEG_RenderTo( IDirectFBImageProvider *thiz,
                break;
           case DSPF_NV12:
                pixelfmt = SHJPEG_PF_NV12;
-               cphys = lock.phys + lock.pitch * dst_surface->config.size.h 
-                         + DFB_BYTES_PER_LINE(dst_surface->config.format, rect.x) + (rect.y/2) * lock.pitch;
                break;
           case DSPF_NV16:
                pixelfmt = SHJPEG_PF_NV16;
-               cphys = phys + lock.pitch * dst_surface->config.size.h;
                break;
           case DSPF_A8:
                pixelfmt = SHJPEG_PF_GRAYSCALE;
@@ -290,7 +284,7 @@ IDirectFBImageProvider_SH7722_JPEG_RenderTo( IDirectFBImageProvider *thiz,
      }
 
 
-     if (shjpeg_decode_run( data->info, pixelfmt, phys, cphys, rect.w, rect.h, lock.pitch) < 0)
+     if (shjpeg_decode_run( data->info, pixelfmt, phys, rect.w, rect.h, lock.pitch) < 0)
           ret = DFB_FAILURE;
 
      dfb_surface_unlock_buffer( dst_surface, &lock );
@@ -455,17 +449,17 @@ IDirectFBImageProvider_SH7722_JPEG_WriteBack( IDirectFBImageProvider *thiz,
 
           /* backup callbacks and private data and setup for file io */
           shjpeg_sops *sops_tmp       = data->info->sops;
-          void        *private_tmp = data->info->private;
+          void        *private_tmp = data->info->priv_data;
 
           data->info->sops = &sops_file;
-          data->info->private = (void*) &fd;
+          data->info->priv_data = (void*) &fd;
 
           if (shjpeg_encode(data->info, pixelfmt, lock.phys, jpeg_size.w, jpeg_size.h, lock.pitch) < 0)
                ret = DFB_FAILURE;
 
           /* restore callbacks and private data */
           data->info->sops = sops_tmp;
-          data->info->private = private_tmp;
+          data->info->priv_data = private_tmp;
                                               
           dfb_surface_unlock_buffer( src_surface, &lock );
      }
@@ -536,7 +530,7 @@ Construct( IDirectFBImageProvider *thiz,
 
           /* set callbacks to context */
           data->info->sops = &sops_databuffer;
-          data->info->private = (void*) buffer;
+          data->info->priv_data = (void*) buffer;
 
           if (shjpeg_decode_init( data->info ) < 0) {
                buffer->Release( buffer );
diff --git a/gfxdrivers/sh772x/sh7722_layer.c b/gfxdrivers/sh772x/sh7722_layer.c
index 1c36b9d..dae702a 100644
--- a/gfxdrivers/sh772x/sh7722_layer.c
+++ b/gfxdrivers/sh772x/sh7722_layer.c
@@ -90,13 +90,13 @@ sh7722InitLayer( CoreLayer                  *layer,
      config->options     = DLOP_ALPHACHANNEL;
      
      /* libshbeu */
+     sdev->shbeu_src[data->layer].s.w = sdev->lcd_width;
+     sdev->shbeu_src[data->layer].s.h = sdev->lcd_height;
+     sdev->shbeu_src[data->layer].s.pitch = sdev->lcd_pitch/DFB_BYTES_PER_PIXEL(config->pixelformat);
+     sdev->shbeu_src[data->layer].s.format = REN_RGB565;
      sdev->shbeu_src[data->layer].alpha = 0xff;
-     sdev->shbeu_src[data->layer].width = sdev->lcd_width;
-     sdev->shbeu_src[data->layer].height = sdev->lcd_height;
-     sdev->shbeu_src[data->layer].pitch = sdev->lcd_pitch/DFB_BYTES_PER_PIXEL(config->pixelformat);
      sdev->shbeu_src[data->layer].x = 0;
      sdev->shbeu_src[data->layer].y = 0;
-     sdev->shbeu_src[data->layer].format = V4L2_PIX_FMT_RGB565;
 
 
      return DFB_OK;
@@ -130,13 +130,8 @@ sh7722TestRegion( CoreLayer                  *layer,
           case DSPF_RGB32:
           case DSPF_RGB24:
           case DSPF_RGB16:
-               break;
-
           case DSPF_NV12:
           case DSPF_NV16:
-               /* YUV only for first input */
-               if (slay->layer != SH7722_LAYER_INPUT1)
-                    fail |= CLRCF_FORMAT;
                break;
 
           default:
@@ -238,8 +233,8 @@ sh7722SetRegion( CoreLayer                  *layer,
                ch = sdev->lcd_height - config->dest.y;
 
           /* libshbeu: Set width and height. */
-          sdev->shbeu_src[n].height = ch;
-          sdev->shbeu_src[n].width  = cw;
+          sdev->shbeu_src[n].s.h = ch;
+          sdev->shbeu_src[n].s.w  = cw;
 
      }
 
@@ -248,22 +243,22 @@ sh7722SetRegion( CoreLayer                  *layer,
           CoreSurfaceBuffer *buffer = lock->buffer;
 
           /* libshbeu: Set buffer pitch. */
-          sdev->shbeu_src[n].pitch = lock->pitch / DFB_BYTES_PER_PIXEL(buffer->format);
+          sdev->shbeu_src[n].s.pitch = lock->pitch / DFB_BYTES_PER_PIXEL(buffer->format);
 
           /* libshbeu: Set buffer offset (Y plane or RGB packed). */
-          sdev->shbeu_src[n].py = lock->phys;
+          sdev->shbeu_src[n].s.py = lock->addr;
+          sdev->shbeu_src[n].s.pc = NULL;
+          sdev->shbeu_src[n].s.pa = NULL;
 
           /* libshbeu: Set alpha plane to same physical address as RGB plane if layer uses alpha */
           if (DFB_PIXELFORMAT_HAS_ALPHA(buffer->format) && (config->options & DLOP_ALPHACHANNEL))
-               sdev->shbeu_src[n].pa = lock->phys;
-          else
-               sdev->shbeu_src[n].pa = 0;
+               sdev->shbeu_src[n].s.pa = lock->addr;
           
           /* Set buffer offset (UV plane). */
           if (DFB_PLANAR_PIXELFORMAT(buffer->format)) {
                D_ASSUME( buffer->format == DSPF_NV12 || buffer->format == DSPF_NV16 );
 
-               sdev->shbeu_src[n].pc = lock->phys + lock->pitch * surface->config.size.h;
+               sdev->shbeu_src[n].s.pc = lock->addr + lock->pitch * surface->config.size.h;
           }
 
           sreg->surface = surface;
@@ -274,30 +269,31 @@ sh7722SetRegion( CoreLayer                  *layer,
           /* Set pixel format. */
           switch (config->format) {
                case DSPF_NV12:
-                    sdev->shbeu_src[n].format = V4L2_PIX_FMT_NV12;
+                    sdev->shbeu_src[n].s.format = REN_NV12;
                     break;
 
                case DSPF_NV16:
-                    sdev->shbeu_src[n].format = V4L2_PIX_FMT_NV16;
+                    sdev->shbeu_src[n].s.format = REN_NV16;
                     break;
 
                case DSPF_ARGB:
                case DSPF_RGB32:
-                    sdev->shbeu_src[n].format = V4L2_PIX_FMT_RGB32; 
+                    sdev->shbeu_src[n].s.format = REN_RGB32;
                     break;
 
                case DSPF_RGB24:
-                    sdev->shbeu_src[n].format = V4L2_PIX_FMT_RGB24; //FIXME: implement in libshbeu
+                    sdev->shbeu_src[n].s.format = REN_BGR24;
                     break;
 
                case DSPF_RGB16:
-                    sdev->shbeu_src[n].format = V4L2_PIX_FMT_RGB565;
+                    sdev->shbeu_src[n].s.format = REN_RGB565;
                     break;
  
+/* Currently not supported
                case DSPF_LUT8:
-                    sdev->shbeu_src[n].format = V4L2_PIX_FMT_PAL8; //FIXME: implement in libshbeu
+                    sdev->shbeu_src[n].s.format = REN_PAL8; //FIXME: implement in libshbeu
                     break;
-
+*/
                default:
                     break;
           }
@@ -311,9 +307,9 @@ sh7722SetRegion( CoreLayer                  *layer,
 
           /* libshbeu: Enable/disable alpha channel. */
           if ((config->options & DLOP_ALPHACHANNEL) && DFB_PIXELFORMAT_HAS_ALPHA(config->format))
-               sdev->shbeu_src[n].pa = sdev->shbeu_src[n].py;
+               sdev->shbeu_src[n].s.pa = sdev->shbeu_src[n].s.py;
           else
-               sdev->shbeu_src[n].pa = 0;
+               sdev->shbeu_src[n].s.pa = 0;
      }
 
 //TODO: Implement CLUT in libshbeu
@@ -372,7 +368,7 @@ sh7722RemoveRegion( CoreLayer *layer,
 
      /* libshbeu: reorder src surfaces and start blending. */
      if (sdev->input_mask) {
-          beu_surface_t* src[3] = {NULL, NULL, NULL};
+          struct shbeu_surface * src[3] = {NULL, NULL, NULL};
           int nr_surfaces = 0;
           if (sdev->input_mask & 1) {
                src[nr_surfaces] = &sdev->shbeu_src[0];
@@ -427,11 +423,11 @@ sh7722FlipRegion( CoreLayer             *layer,
      fusion_skirmish_prevail( &sdev->beu_lock );
 
      /* set new physical address for layer */
-     sdev->shbeu_src[n].py = lock->phys;
+     sdev->shbeu_src[n].s.py = lock->addr;
 
      /* libshbeu: reorder src surfaces and start blending. */
      if (sdev->input_mask) {
-          beu_surface_t* src[3] = {NULL, NULL, NULL};
+          struct shbeu_surface * src[3] = {NULL, NULL, NULL};
           int nr_surfaces = 0;
           if (sdev->input_mask & 1) {
                src[nr_surfaces] = &sdev->shbeu_src[0];
@@ -475,7 +471,7 @@ sh7722UpdateRegion( CoreLayer             *layer,
 
      /* libshbeu: reorder src surfaces and start blending. */
      if (sdev->input_mask) {
-          beu_surface_t* src[3] = {NULL, NULL, NULL};
+          struct shbeu_surface * src[3] = {NULL, NULL, NULL};
           int nr_surfaces = 0;
           if (sdev->input_mask & 1) {
                src[nr_surfaces] = &sdev->shbeu_src[0];
diff --git a/gfxdrivers/sh772x/sh7722_types.h b/gfxdrivers/sh772x/sh7722_types.h
index db2a4d1..6007bb3 100644
--- a/gfxdrivers/sh772x/sh7722_types.h
+++ b/gfxdrivers/sh772x/sh7722_types.h
@@ -107,8 +107,8 @@ typedef struct {
      u32                      color16;
 
      /* libshbeu */
-     beu_surface_t            shbeu_src[3];
-     beu_surface_t            shbeu_dest;
+     struct shbeu_surface     shbeu_src[3];
+     struct shbeu_surface     shbeu_dest;
 
 } SH7722DeviceData;
 
diff --git a/systems/devmem/Makefile.am b/systems/devmem/Makefile.am
index b85d92a..f2c47b7 100644
--- a/systems/devmem/Makefile.am
+++ b/systems/devmem/Makefile.am
@@ -24,7 +24,8 @@ systems_LTLIBRARIES = libdirectfb_devmem.la
 
 libdirectfb_devmem_la_LDFLAGS = \
 	-avoid-version	\
-	-module
+	-module \
+	$(SH772X_DEP_LIBS)
 
 libdirectfb_devmem_la_SOURCES = \
 	devmem.c		\
@@ -36,5 +37,4 @@ libdirectfb_devmem_la_LIBADD = \
 	$(top_builddir)/lib/fusion/libfusion.la \
 	$(top_builddir)/src/libdirectfb.la
 
-
 include $(top_srcdir)/rules/libobject.make
diff --git a/systems/devmem/devmem.c b/systems/devmem/devmem.c
index 2a19538..e23ce70 100644
--- a/systems/devmem/devmem.c
+++ b/systems/devmem/devmem.c
@@ -49,6 +49,10 @@
 
 #include <core/core_system.h>
 
+#ifdef HAVE_GFX_SH772X
+#include <uiomux/uiomux.h>
+#endif
+
 DFB_CORE_SYSTEM( devmem )
 
 /**********************************************************************************************************************/
@@ -88,6 +92,10 @@ MapMemAndReg( DevMemData    *data,
           }
      }
 
+#ifdef HAVE_GFX_SH772X
+	uiomux_register (data->mem, mem_phys, mem_length);
+#endif
+
      close( fd );
 
      return DFB_OK;
